[{"F:\\webdev\\solved-problems-app\\src\\index.js":"1","F:\\webdev\\solved-problems-app\\src\\App.js":"2","F:\\webdev\\solved-problems-app\\src\\reportWebVitals.js":"3","F:\\webdev\\solved-problems-app\\src\\Components\\AreaAndPerimeter.js":"4","F:\\webdev\\solved-problems-app\\src\\Components\\Home.js":"5","F:\\webdev\\solved-problems-app\\src\\Components\\Factorial.js":"6","F:\\webdev\\solved-problems-app\\src\\Components\\CircleAnP.js":"7","F:\\webdev\\solved-problems-app\\src\\Components\\Score.js":"8","F:\\webdev\\solved-problems-app\\src\\Components\\FunVdSwitch.js":"9","F:\\webdev\\solved-problems-app\\src\\Components\\VowelNConso.js":"10","F:\\webdev\\solved-problems-app\\src\\Components\\SecondMaxNo.js":"11","F:\\webdev\\solved-problems-app\\src\\Components\\StringRev.js":"12","F:\\webdev\\solved-problems-app\\src\\Components\\RectAnP.js":"13","F:\\webdev\\solved-problems-app\\src\\Components\\Demo.js":"14","F:\\webdev\\solved-problems-app\\src\\Components\\FinishedProduct.js":"15","F:\\webdev\\solved-problems-app\\src\\Components\\Table.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":4258,"mtime":1611749885964,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"20","hashOfConfig":"18"},{"size":2468,"mtime":1611334766695,"results":"21","hashOfConfig":"18"},{"size":4323,"mtime":1611562558873,"results":"22","hashOfConfig":"18"},{"size":1020,"mtime":1611235177905,"results":"23","hashOfConfig":"18"},{"size":2237,"mtime":1611337961974,"results":"24","hashOfConfig":"18"},{"size":1346,"mtime":1611235218204,"results":"25","hashOfConfig":"18"},{"size":2733,"mtime":1611327052232,"results":"26","hashOfConfig":"18"},{"size":1941,"mtime":1611235256599,"results":"27","hashOfConfig":"18"},{"size":2482,"mtime":1611235270262,"results":"28","hashOfConfig":"18"},{"size":1147,"mtime":1611235281411,"results":"29","hashOfConfig":"18"},{"size":977,"mtime":1611235298914,"results":"30","hashOfConfig":"18"},{"size":10027,"mtime":1611729711857,"results":"31","hashOfConfig":"18"},{"size":6193,"mtime":1611749596955,"results":"32","hashOfConfig":"18"},{"size":3335,"mtime":1611858989622,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"p4i23t",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"36"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\webdev\\solved-problems-app\\src\\index.js",[],["74","75"],"F:\\webdev\\solved-problems-app\\src\\App.js",["76"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Home from \"./Components/Home\";\r\nimport AreaAndPerimeter from \"./Components/AreaAndPerimeter\";\r\nimport Factorial from \"./Components/Factorial\";\r\nimport CircleAnP from \"./Components/CircleAnP\";\r\nimport Score from \"./Components/Score\";\r\nimport FunVdSwitch from \"./Components/FunVdSwitch\";\r\nimport VowelNConso from \"./Components/VowelNConso\";\r\nimport SecondMaxNo from \"./Components/SecondMaxNo\";\r\nimport StringRev from \"./Components/StringRev\";\r\nimport RectAnP from \"./Components/RectAnP\";\r\nimport Demo from \"./Components/Demo\";\r\nimport FinishedProduct from \"./Components/FinishedProduct\";\r\nimport Table from \"./Components/Table\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    minWidth: 275,\r\n    marginBottom: \"20px\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nconst App = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div style={{ backgroundColor: \"rgb(207, 236, 236) \" }}>\r\n      <Router>\r\n        <AppBar position=\"fixed\">\r\n          <Toolbar>\r\n            <Link to=\"/\">\r\n              <Avatar\r\n                alt=\"Remy Sharp\"\r\n                src=\"https://thumbs.dreamstime.com/b/logo-letter-monogram-slash-modern-logo-designs-template-black-color-white-background-sr-logo-letter-monogram-slash-175325271.jpg\"\r\n              />\r\n            </Link>\r\n\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              <Box fontWeight=\"fontWeightBold\" fontSize=\"h4.fontSize\" m={1}>\r\n                SolutionRank\r\n              </Box>\r\n            </Typography>\r\n\r\n            <Link to=\"/\">\r\n              {\" \"}\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginRight: \"10px\" }}\r\n              >\r\n                HOME\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/Demo\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginRight: \"10px\" }}\r\n              >\r\n                Demo\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/Table\">\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                size=\"large\"\r\n                style={{ marginRight: \"10px\" }}\r\n              >\r\n                Table\r\n              </Button>\r\n            </Link>\r\n\r\n            <Link to=\"/FinishedProduct\">\r\n              <Button variant=\"contained\" color=\"primary\" size=\"large\">\r\n                Finished Product\r\n              </Button>\r\n            </Link>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <div style={{ padding: \"100px\" }}>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/Demo\" exact component={Demo} />\r\n          <Route path=\"/Table\" exact component={Table} />\r\n          <Route path=\"/FinishedProduct\" exact component={FinishedProduct} />\r\n          <Route path=\"/AreaAndPerimeter\" exact component={AreaAndPerimeter} />\r\n          <Route path=\"/Factorial\" exact component={Factorial} />\r\n          <Route path=\"/CircleAnP\" exact component={CircleAnP} />\r\n          <Route path=\"/Score\" exact component={Score} />\r\n          <Route path=\"/FunVdSwitch\" exact component={FunVdSwitch} />\r\n          <Route path=\"/VowelNConso\" exact component={VowelNConso} />\r\n          <Route path=\"/SecondMaxNo\" exact component={SecondMaxNo} />\r\n          <Route path=\"/StringRev\" exact component={StringRev} />\r\n          <Route path=\"/RectAnP\" exact component={RectAnP} />\r\n        </div>\r\n      </Router>{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","F:\\webdev\\solved-problems-app\\src\\reportWebVitals.js",[],"F:\\webdev\\solved-problems-app\\src\\Components\\AreaAndPerimeter.js",[],"F:\\webdev\\solved-problems-app\\src\\Components\\Home.js",["77","78"],"import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./Home.css\";\r\n\r\nconst Home = () => {\r\n  const history = useHistory();\r\n  const navigate = (route) => {\r\n    history.push(route);\r\n  };\r\n\r\n  return (\r\n    <div className=\"center\">\r\n      <div>\r\n        <h1>DASHBOARD</h1>\r\n      </div>\r\n\r\n      <Grid\r\n        container\r\n        justify=\"center\"\r\n        style={{\r\n          backgroundColor: \"peachpuff\",\r\n          padding: \"20px\",\r\n        }}\r\n      >\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/AreaAndPerimeter\")}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                backgroundColor: \"rgb(252, 252, 143)\",\r\n              }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>\r\n                Area and Perimeter\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/Factorial\")}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>\r\n                Calculatefactorial\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/CircleAnP\")}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                backgroundColor: \"rgb(252, 252, 143)\",\r\n              }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>\r\n                CircleAnP\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/Score\")}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>Score</CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/FunVdSwitch\")}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                backgroundColor: \"rgb(252, 252, 143)\",\r\n              }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>\r\n                FunVdSwitch\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/VowelNConso\")}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>\r\n                VowelNConso\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/SecondMaxNo\")}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                backgroundColor: \"rgb(252, 252, 143)\",\r\n              }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>\r\n                SecondMaxNo\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/StringRev\")}\r\n              style={{ cursor: \"pointer\" }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>\r\n                StringRev\r\n              </CardContent>\r\n            </Card>\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6} md={4}>\r\n            <Card\r\n              onClick={() => navigate(\"/RectAnP\")}\r\n              style={{\r\n                cursor: \"pointer\",\r\n                backgroundColor: \"rgb(252, 252, 143)\",\r\n              }}\r\n            >\r\n              <CardContent style={{ fontWeight: \"bold\" }}>RectAnP</CardContent>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","F:\\webdev\\solved-problems-app\\src\\Components\\Factorial.js",[],"F:\\webdev\\solved-problems-app\\src\\Components\\CircleAnP.js",["79","80","81","82","83","84","85"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 500,\r\n  },\r\n});\r\n\r\nconst CircleAnP = () => {\r\n  const [rad, setRad] = useState(\"\");\r\n  const [area, setArea] = useState();\r\n  const [perimeter, setPerimeter] = useState();\r\n  const handleChange = (event) => {\r\n    setRad(event.target.value);\r\n  };\r\n  const pi = Math.PI;\r\n  const circleArea = (r) => {\r\n    let a = pi * r * r;\r\n    return a;\r\n  };\r\n  const circlePeri = (r) => {\r\n    let p = 2 * pi * r;\r\n    return p;\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setArea(circleArea(rad));\r\n    setPerimeter(circlePeri(rad));\r\n    // setRad(\"\"); //to make input field empty on submit of form\r\n  };\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item justify=\"center\" style={{ backgroundColor: \"black\" }}>\r\n        <Card\r\n          style={{\r\n            backgroundColor: \"khaki\",\r\n            textAlign: \"center\",\r\n            width: \"50vw\",\r\n            margin: \"20px\",\r\n          }}\r\n          variant=\"outlined\"\r\n        >\r\n          <form onSubmit={handleSubmit}>\r\n            <h2>Area N Perimeter of Circle</h2>\r\n\r\n            <label>Enter radius of circle: </label>\r\n            <input type=\"number\" value={rad} onChange={handleChange} />\r\n            <br />\r\n            <button type=\"submit\">Calculate!!</button>\r\n            <p>\r\n              radius: {rad}\r\n              <br />\r\n              <strong>Area of cicrcle:</strong>\r\n              {area}\r\n              <br />\r\n              <strong>Perimeter of circle:</strong>\r\n              {perimeter}\r\n            </p>\r\n            <br />\r\n          </form>\r\n        </Card>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default CircleAnP;\r\n","F:\\webdev\\solved-problems-app\\src\\Components\\Score.js",[],"F:\\webdev\\solved-problems-app\\src\\Components\\FunVdSwitch.js",["86","87"],"import { Link } from \"react-router-dom\";\r\nimport React, { useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst FunVdSwitch = () => {\r\n  const [string, setString] = useState(\"\");\r\n  const [letter, setLetter] = useState(\"\");\r\n\r\n  const handleChange = (event) => {\r\n    setString(event.target.value);\r\n  };\r\n\r\n  const getLetter = (s) => {\r\n    switch (\r\n      s.charAt(0) //we can also use s[0]\r\n    ) {\r\n      case \"a\":\r\n      case \"e\":\r\n      case \"i\":\r\n      case \"o\":\r\n      case \"u\":\r\n        return \"A\";\r\n\r\n      case \"b\":\r\n      case \"c\":\r\n      case \"d\":\r\n      case \"f\":\r\n      case \"g\":\r\n        return \"B\";\r\n\r\n      case \"h\":\r\n      case \"j\":\r\n      case \"k\":\r\n      case \"l\":\r\n      case \"m\":\r\n        return \"C\";\r\n      default:\r\n        return \"D\";\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault(); //prevents the default bheaviour of form(ie always reload the page)\r\n    setLetter(getLetter(string));\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      maxWidth=\"sm\"\r\n      style={{\r\n        backgroundColor: \"rgb(255, 183, 183)\",\r\n        height: \"60vh\",\r\n      }}\r\n    >\r\n      {/* <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-evenly\"\r\n        alignItems=\"center\"\r\n        style={{\r\n          backgroundColor: \"green\",\r\n          height: \"50vh\",\r\n        }}\r\n      >\r\n        <Grid item xs={12} sm={6} md={4}> */}\r\n      <form onSubmit={handleSubmit}>\r\n        <h4>\r\n          Q: If the first character in string is in the set (a,e,i,o,u), then\r\n          return letter A.\r\n          <br />\r\n          If the first character in string is in the set (b,c,d,f,g), then\r\n          return letter B.\r\n          <br />\r\n          If the first character in string is in the set (h,j,k,l,m), then\r\n          return letter C.\r\n          <br />\r\n          else return letter D.\r\n        </h4>\r\n        <br />\r\n\r\n        <Typography>Enter String below:</Typography>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          type=\"text\"\r\n          placeholder=\"Type a string\"\r\n          value={string}\r\n          onChange={handleChange}\r\n        />\r\n        <br />\r\n        <br />\r\n\r\n        <Button variant=\"contained\" size=\"small\" color=\"primary\" type=\"submit\">\r\n          get Letter\r\n        </Button>\r\n        <br />\r\n        <br />\r\n        <strong>Letter:</strong>\r\n        {letter}\r\n        <br />\r\n      </form>\r\n      {/* </Grid>\r\n      </Grid> */}\r\n    </Container>\r\n  );\r\n};\r\nexport default FunVdSwitch;\r\n","F:\\webdev\\solved-problems-app\\src\\Components\\VowelNConso.js",[],"F:\\webdev\\solved-problems-app\\src\\Components\\SecondMaxNo.js",[],"F:\\webdev\\solved-problems-app\\src\\Components\\StringRev.js",["88"],"import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst StringRev = () => {\r\n  const [str, setStr] = useState(\"\");\r\n  const [revStr, setRevStr] = useState(\"\");\r\n  const handleChange = (event) => {\r\n    setStr(event.target.value);\r\n  };\r\n  const reverseString = (s) => {\r\n    try {\r\n      let newStr = \"\";\r\n      if (!isNaN(s)) {\r\n        throw { message: \"This is not a String!\" };\r\n      }\r\n      for (let i = s.length - 1; i >= 0; i--) {\r\n        newStr = newStr + s.charAt(i);\r\n      }\r\n      return newStr;\r\n    } catch (error) {\r\n      return error.message;\r\n    }\r\n  };\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setRevStr(reverseString(str));\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h3>Reverse String</h3>\r\n      <label>Enter String:</label>\r\n      <input type=\"text\" value={str} onChange={handleChange} />\r\n      <br />\r\n      <button type=\"submit\">Get It!</button>\r\n      <br />\r\n      Output: {revStr}\r\n      <br />\r\n      <Link to=\"/\">\r\n        {\" \"}\r\n        <button>Home</button>\r\n      </Link>\r\n    </form>\r\n  );\r\n};\r\nexport default StringRev;\r\n","F:\\webdev\\solved-problems-app\\src\\Components\\RectAnP.js",[],"F:\\webdev\\solved-problems-app\\src\\Components\\Demo.js",["89","90","91","92"],"import React, { useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Check, Create } from \"@material-ui/icons\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\r\nimport CheckBoxIcon from \"@material-ui/icons/CheckBox\";\r\n\r\nconst Demo = (props) => {\r\n  const jsonData = {\r\n    success: true,\r\n    data: {\r\n      shelfLife: {\r\n        value: \"50\",\r\n        uom: \"Days\",\r\n      },\r\n      countryOfOrigin: [\r\n        {\r\n          code: \"IN\",\r\n          name: \"India\",\r\n          countryCode: \"91\",\r\n          phoneNumberLength: 10,\r\n        },\r\n        {\r\n          code: \"CA\",\r\n          name: \"Canada\",\r\n          countryCode: \"1\",\r\n          suggested: true,\r\n          phoneNumberLength: 10,\r\n        },\r\n      ],\r\n      plants: [\r\n        {\r\n          name: \"Nature's Touch LLC\",\r\n        },\r\n        {\r\n          name: \"Herbel Plus\",\r\n        },\r\n      ],\r\n      variety: [\r\n        {\r\n          name: \"Fuji\",\r\n          description: \"Fuji\",\r\n        },\r\n        {\r\n          name: \"Food\",\r\n          description: \"Some food\",\r\n        },\r\n      ],\r\n      parameter: [\r\n        {\r\n          name: \"Param \",\r\n        },\r\n        {\r\n          name: \"FP1\",\r\n        },\r\n        {\r\n          name: \"param2\",\r\n        },\r\n      ],\r\n      name: \"Apple Organic Sliced Fuji  5/8\",\r\n      itemCode: \"APPOSMFJ\",\r\n      foodType: {\r\n        name: \"Fruits\",\r\n        description: \"Fruits\",\r\n      },\r\n      rawMaterialGroup: {\r\n        scope: \"Custom\",\r\n        _id: \"5f7de24633603b0008e50ff4\",\r\n        name: \"Apple\",\r\n        description: \"Apple\",\r\n      },\r\n      unitOfMeasurement: {\r\n        name: \"Kilograms\",\r\n        symbol: \"kg\",\r\n        description: \"To measure weight / mass of a material \",\r\n      },\r\n      grade: {\r\n        name: \"Grade A\",\r\n        description: \"A Grade\",\r\n      },\r\n      description:\r\n        \"An apple is an edible fruit produced by an apple tree. Apple trees are cultivated worldwide and are the most widely grown species in the genus Malus.\",\r\n      netWeight: \"100\",\r\n    },\r\n  };\r\n\r\n  const [isEditable, setIsEditable] = useState(false);\r\n  const [name, setName] = useState(\"Apple Organic Sliced Fuji 5/8\");\r\n  const [days, setDays] = useState(\"50 Days\");\r\n  const handleChange = (event) => {\r\n    if (event.target.name === \"name\") {\r\n      setName(event.target.value);\r\n    } else if (event.target.name === \"days\") {\r\n      setDays(event.target.value);\r\n    }\r\n  };\r\n\r\n  const [foodType, setFoodType] = useState(\"fruits\");\r\n  const types = [\"fruits\", \"vegies\"];\r\n  const handleSelect = (event, value) => {\r\n    setFoodType(value);\r\n\r\n    // console.log(\"event:\", event.target.value, \"value\", value);\r\n  };\r\n\r\n  const [variety, setVariety] = useState([\"Food\"]);\r\n  const varieties = [\"Food\", \"Fruit\", \"Fuji\"];\r\n  const [group, setGroup] = useState([\"Fuji\"]);\r\n  const groups = [\"Apple\", \"Kashmiri\", \"Shimla\", \"Fuji\"];\r\n  const handleVariety = (event, value) => {\r\n    console.log(\"value:\", value, \"eventname:\", event.target.name);\r\n    // if (event.target.name === \"variety\") {\r\n    setVariety(value);\r\n\r\n    // } else if (event.target.name === \"group\") {\r\n    //   setGroup(value);\r\n    // }\r\n  };\r\n\r\n  const [parameter, setParameter] = useState({ name: \"FP1\" });\r\n  const Parameters = [\r\n    {\r\n      name: \"Param\",\r\n    },\r\n    {\r\n      name: \"FP1\",\r\n    },\r\n    {\r\n      name: \"param2\",\r\n    },\r\n  ];\r\n  const [country, setCountry] = useState(\"India\");\r\n  const countries = [\r\n    {\r\n      code: \"IN\",\r\n      name: \"India\",\r\n      countryCode: \"91\",\r\n      phoneNumberLength: 10,\r\n    },\r\n    {\r\n      code: \"CA\",\r\n      name: \"Canada\",\r\n      countryCode: \"1\",\r\n      suggested: true,\r\n      phoneNumberLength: 10,\r\n    },\r\n  ];\r\n  const handleParameter = (event, value) => {\r\n    // console.log(\"event:\", event.name, \"value:\", value.name);\r\n    if (event.target.name === \"country\") {\r\n      setCountry(value);\r\n    } else {\r\n      setParameter(value);\r\n    }\r\n  };\r\n\r\n  const [plant, setPlant] = useState([{ name: \"Nature's Touch LLC\" }]);\r\n  const plants = [\r\n    {\r\n      name: \"Nature's Touch LLC\",\r\n    },\r\n    {\r\n      name: \"Herbel Plus\",\r\n    },\r\n  ];\r\n  const handlePlants = (event, value) => {\r\n    // console.log(value);\r\n    setPlant(value);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      spacing={3}\r\n      style={{ padding: \"auto\", paddingLeft: \"20px\" }}\r\n    >\r\n      <Grid item lg={12}>\r\n        <h1>General Information</h1>\r\n      </Grid>\r\n      {/* <Grid item container justify=\"flex-end\"> */}\r\n      <Grid item lg={12} style={{ textAlign: \"right\" }}>\r\n        {!isEditable ? (\r\n          <Create onClick={() => setIsEditable(true)} />\r\n        ) : (\r\n          <Check onClick={() => setIsEditable(false)} />\r\n        )}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Raw Material Name</h3>\r\n\r\n        {isEditable ? (\r\n          <TextField value={name} name=\"name\" onChange={handleChange} />\r\n        ) : (\r\n          name\r\n        )}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Item Code:</h3>\r\n        {jsonData.data.itemCode}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Shelf Life:</h3>\r\n        {isEditable ? (\r\n          <TextField name=\"days\" value={days} onChange={handleChange} />\r\n        ) : (\r\n          days\r\n        )}\r\n        {/* {jsonData.data.shelfLife.value + \" \" + jsonData.data.shelfLife.uom} */}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Food Type</h3>\r\n        {isEditable ? (\r\n          <Autocomplete\r\n            onChange={handleSelect}\r\n            value={foodType}\r\n            options={types}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Select food\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        ) : (\r\n          foodType\r\n        )}\r\n\r\n        {/* {jsonData.data.foodType.name} */}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Food Group</h3>\r\n        {isEditable ? (\r\n          <Autocomplete\r\n            multiple\r\n            name=\"group\"\r\n            value={group}\r\n            onChange={handleVariety}\r\n            options={groups}\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label=\"Select group\" />\r\n            )}\r\n          />\r\n        ) : (\r\n          group.join(\", \")\r\n        )}\r\n\r\n        {/* {jsonData.data.rawMaterialGroup.name} */}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Country of origin:</h3>\r\n\r\n        {isEditable ? (\r\n          <Autocomplete\r\n            onChange={handleSelect}\r\n            name=\"country\"\r\n            value={country}\r\n            options={countries}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select country\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          country\r\n        )}\r\n        {/* {jsonData.data.countryOfOrigin.map((e, i) => e.name).join(\", \")} */}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Net Weight:</h3>\r\n        {jsonData.data.netWeight + \" \" + jsonData.data.unitOfMeasurement.name}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Food Grade:</h3>\r\n        {jsonData.data.grade.name}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Food Variety:</h3>\r\n        {isEditable ? (\r\n          <Autocomplete\r\n            multiple\r\n            name=\"variety\"\r\n            value={variety}\r\n            onChange={handleVariety}\r\n            options={varieties}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Select variety\"\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          variety.join(\", \")\r\n        )}\r\n        {/* <div>{jsonData.data.variety.map((e, i) => e.name).join(\", \")}</div> */}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Parameters:</h3>\r\n\r\n        {isEditable ? (\r\n          <Autocomplete\r\n            onChange={handleParameter}\r\n            value={parameter}\r\n            getOptionLabel={(option) => option.name}\r\n            options={Parameters}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select Parameter\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          parameter.name\r\n        )}\r\n\r\n        {/* <div>\r\n          {jsonData.data.parameter\r\n            .map((element, index) => element.name)\r\n            .join(\", \")}\r\n        </div> */}\r\n      </Grid>\r\n\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Plants:</h3>\r\n        {isEditable ? (\r\n          <Autocomplete\r\n            multiple\r\n            options={plants}\r\n            value={plant}\r\n            style={{ width: 300 }}\r\n            onChange={handlePlants}\r\n            getOptionLabel={(option) => option.name}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Select\"\r\n                // placeholder=\"Favorites\"\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          plant.map((element, index) => plant[index].name).join(\", \")\r\n        )}\r\n        {/* <div>\r\n          {jsonData.data.plants\r\n            .map((element, index) => element.name)\r\n            .join(\", \")}\r\n        </div> */}\r\n      </Grid>\r\n\r\n      <Grid item lg={8} sm={6} md={4}>\r\n        <h3>Description:</h3>\r\n        {jsonData.data.description}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default Demo;\r\n","F:\\webdev\\solved-problems-app\\src\\Components\\FinishedProduct.js",["93"],"import React, { useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Check, Create } from \"@material-ui/icons\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nconst FinishedProduct = () => {\r\n  const [editState, setEditState] = useState(false);\r\n  const handleEditClick = () => {\r\n    setEditState(true);\r\n  };\r\n  const handleCheckClick = () => {\r\n    setEditState(false);\r\n    alert(\"Your data has been successfully saved.\");\r\n  };\r\n\r\n  const [name, setName] = useState(\"Milkshake\");\r\n  const [itemCode, setItemCode] = useState(\"\");\r\n  const handleTextChange = (event) => {\r\n    if (event.target.name === \"name\") {\r\n      setName(event.target.value);\r\n    } else if (event.target.name === \"itemCode\") {\r\n      setItemCode(event.target.value);\r\n    }\r\n  };\r\n  const [brand, setBrand] = useState(\"\");\r\n  const brands = [\"Amul\", \"MotherDairy\", \"Saras\", \"Britania\"];\r\n  const handleBrands = (event, value) => {\r\n    // console.log(\"event:\", event, \"value:\", value);\r\n    setBrand(value);\r\n  };\r\n\r\n  const [Ingredients, setIngredients] = useState([]);\r\n  const ingredient = [\"Milk\", \"Sugar\", \"Added Flavour\", \"Milk Powder\"];\r\n  const handleIngredient = (event, value) => {\r\n    // console.log(\"event:\", event, \"value:\", value);\r\n    setIngredients(value);\r\n  };\r\n\r\n  const [countries, setCountries] = useState([]);\r\n  const country = [\r\n    { name: \"India\" },\r\n    { name: \"UAE\" },\r\n    { name: \"Canada\" },\r\n    { name: \"America\" },\r\n  ];\r\n  const handleCountry = (event, value) => {\r\n    // console.log(\"event:\", event, \"value:\", value);\r\n    setCountries(value);\r\n  };\r\n  const [parameter, setParameter] = useState({});\r\n  const parameters = [\r\n    {\r\n      name: \"Param\",\r\n    },\r\n    {\r\n      name: \"FP1\",\r\n    },\r\n    {\r\n      name: \"param2\",\r\n    },\r\n  ];\r\n  const handleParameter = (event, value) => {\r\n    // console.log(\"event:\", event, \"value:\", value);\r\n    setParameter(value);\r\n  };\r\n  const [plant, setPlant] = useState({});\r\n  const plants = [\r\n    {\r\n      name: \"Nature's Touch LLC\",\r\n    },\r\n    {\r\n      name: \"Herbel Plus\",\r\n    },\r\n  ];\r\n  const handlePlants = (event, value) => {\r\n    console.log(\"event:\", event, \"value:\", value);\r\n  };\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item lg={12}>\r\n        <h1>General Information</h1>\r\n      </Grid>\r\n      <Grid item lg={12} style={{ textAlign: \"right\" }}>\r\n        {editState ? (\r\n          <Check onClick={handleCheckClick} />\r\n        ) : (\r\n          <Create onClick={handleEditClick} />\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Name:</h3>\r\n        {editState ? (\r\n          <TextField\r\n            variant=\"outlined\"\r\n            onChange={handleTextChange}\r\n            value={name}\r\n            name=\"name\"\r\n          />\r\n        ) : (\r\n          name\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Brand:</h3>\r\n        {editState ? (\r\n          <Autocomplete\r\n            onChange={handleBrands}\r\n            value={brand}\r\n            options={brands}\r\n            //   getOptionLabel={(option) => option.title}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Select Brand\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        ) : (\r\n          brand\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Ingredients:</h3>\r\n        {editState ? (\r\n          <Autocomplete\r\n            multiple\r\n            value={Ingredients}\r\n            onChange={handleIngredient}\r\n            options={ingredient}\r\n            //   getOptionLabel={(option) => option.title}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Select Ingredint\"\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          Ingredients.join(\", \")\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Contry of Sale:</h3>\r\n        {editState ? (\r\n          <Autocomplete\r\n            multiple\r\n            value={countries}\r\n            onChange={handleCountry}\r\n            style={{ width: 300 }}\r\n            options={country}\r\n            getOptionLabel={(option) => option.name}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Select Country\"\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          countries.map((element, index) => element.name).join(\", \")\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Parameter:</h3>\r\n        {editState ? (\r\n          <Autocomplete\r\n            onChange={handleParameter}\r\n            value={parameter}\r\n            options={parameters}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => (\r\n              <TextField\r\n                {...params}\r\n                label=\"Select Parameter\"\r\n                variant=\"outlined\"\r\n              />\r\n            )}\r\n          />\r\n        ) : (\r\n          parameter.name\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Item Code:</h3>\r\n        {editState ? (\r\n          <TextField\r\n            value={itemCode}\r\n            onChange={handleTextChange}\r\n            name=\"itemCode\"\r\n            variant=\"outlined\"\r\n          />\r\n        ) : (\r\n          itemCode\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={4}>\r\n        <h3>Plants:</h3>\r\n        {editState ? (\r\n          <Autocomplete\r\n            onChange={handlePlants}\r\n            value={plant}\r\n            options={plants}\r\n            getOptionLabel={(option) => option.name}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => (\r\n              <TextField {...params} label=\"Select Plant\" variant=\"outlined\" />\r\n            )}\r\n          />\r\n        ) : (\r\n          plant.name\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default FinishedProduct;\r\n","F:\\webdev\\solved-problems-app\\src\\Components\\Table.js",["94","95","96","97"],{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":20},{"ruleId":"102","severity":1,"message":"106","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":17},{"ruleId":"102","severity":1,"message":"107","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":19},{"ruleId":"102","severity":1,"message":"108","line":2,"column":10,"nodeType":"104","messageId":"105","endLine":2,"endColumn":14},{"ruleId":"102","severity":1,"message":"107","line":5,"column":8,"nodeType":"104","messageId":"105","endLine":5,"endColumn":19},{"ruleId":"102","severity":1,"message":"109","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":19},{"ruleId":"102","severity":1,"message":"110","line":7,"column":8,"nodeType":"104","messageId":"105","endLine":7,"endColumn":14},{"ruleId":"102","severity":1,"message":"111","line":8,"column":8,"nodeType":"104","messageId":"105","endLine":8,"endColumn":18},{"ruleId":"102","severity":1,"message":"106","line":10,"column":8,"nodeType":"104","messageId":"105","endLine":10,"endColumn":17},{"ruleId":"102","severity":1,"message":"112","line":40,"column":9,"nodeType":"104","messageId":"105","endLine":40,"endColumn":16},{"ruleId":"102","severity":1,"message":"108","line":1,"column":10,"nodeType":"104","messageId":"105","endLine":1,"endColumn":14},{"ruleId":"102","severity":1,"message":"113","line":3,"column":8,"nodeType":"104","messageId":"105","endLine":3,"endColumn":12},{"ruleId":"114","severity":1,"message":"115","line":14,"column":9,"nodeType":"116","messageId":"117","endLine":14,"endColumn":52},{"ruleId":"102","severity":1,"message":"118","line":6,"column":8,"nodeType":"104","messageId":"105","endLine":6,"endColumn":16},{"ruleId":"102","severity":1,"message":"119","line":7,"column":8,"nodeType":"104","messageId":"105","endLine":7,"endColumn":32},{"ruleId":"102","severity":1,"message":"120","line":8,"column":8,"nodeType":"104","messageId":"105","endLine":8,"endColumn":20},{"ruleId":"102","severity":1,"message":"121","line":110,"column":17,"nodeType":"104","messageId":"105","endLine":110,"endColumn":25},{"ruleId":"102","severity":1,"message":"122","line":67,"column":17,"nodeType":"104","messageId":"105","endLine":67,"endColumn":25},{"ruleId":"102","severity":1,"message":"123","line":2,"column":25,"nodeType":"104","messageId":"105","endLine":2,"endColumn":38},{"ruleId":"102","severity":1,"message":"124","line":9,"column":19,"nodeType":"104","messageId":"105","endLine":9,"endColumn":29},{"ruleId":"125","severity":1,"message":"126","line":35,"column":21,"nodeType":"127","messageId":"128","endLine":35,"endColumn":23},{"ruleId":"125","severity":1,"message":"126","line":36,"column":41,"nodeType":"127","messageId":"128","endLine":36,"endColumn":43},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'useHistory' is defined but never used.","Identifier","unusedVar","'Container' is defined but never used.","'CardActions' is defined but never used.","'Link' is defined but never used.","'CardContent' is defined but never used.","'Button' is defined but never used.","'Typography' is defined but never used.","'classes' is assigned a value but never used.","'Grid' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'Checkbox' is defined but never used.","'CheckBoxOutlineBlankIcon' is defined but never used.","'CheckBoxIcon' is defined but never used.","'setGroup' is assigned a value but never used.","'setPlant' is assigned a value but never used.","'MTableToolbar' is defined but never used.","'setColumns' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]